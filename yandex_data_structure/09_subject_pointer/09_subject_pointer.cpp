/*
Есть книга и предметный указатель для нее. 
Это список ключевых слов, для каждого из которых указана страница,
на которой это слово встречается.
Теперь профессор хочет для каждой страницы выписать в алфавитном порядке все ключевые слова,
которые на эту страницу попали (если такие вообще есть).
Помогите профессору решить эту задачу.

Формат ввода
Сначала задано натуральное число n, не превосходящее 1000 — количество слов,
которое требуется обработать. Далее идут n строк.
В каждой строке сначала записано ключевое слово. Затем идёт натуральное число,
также не превосходящее 1000, — номер страницы. Ключевые слова состоят из латинских букв,
не бывают пустыми и по длине не превосходят 16 символов. Слова в списке, конечно, могут повторяться.

Формат вывода
Выпишите в порядке возрастания все страницы, на которых присутствуют ключевые слова.
После каждого номера страницы через пробел выпишите в алфавитном порядке сами эти слова.
Если на какой-то странице слово встретилось несколько раз, то повторять его не нужно.
Завершающего пробела в конце строк быть не должно.
*/

#include <fstream>
#include <iostream>
#include <map>
#include <set>
#include <stdexcept>
#include <string>


int main(){
    std::map<int, std::set<std::string>> pages;

    try{
        std::ifstream in("input.txt");

        if(!in.is_open()){
            throw std::runtime_error("Файл входных данных input.txt отсутствует!");
        }

        int number_of_pages;
    in >> number_of_pages;
    int page;
    std::string word;
    for (int i = 0; i < number_of_pages; i++){
        in >> word >> page;
        pages[page].insert(word);
    }

    bool first = true;
    std::ofstream out("output.txt");
    for (const auto& [key_page, words]: pages){
        if (!first){out<<std::endl;}

        out<< key_page;
        for (std::string value_word: words){
            out<< ' ' << value_word;
        }
        first = false;
    }
    std::cout<< "Задача выполнена. Смотри результат в файле output.txt" << std::endl;
    }catch (const std::exception& e){
        std::cerr << e.what() << std::endl;
    }
}